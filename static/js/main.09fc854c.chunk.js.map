{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","selectWord","arraySyn","word","replaceWord","getSyn","synWord","_this","axios","get","concat","then","res","data","setState","Object","toConsumableArray","catch","error","console","log","getSelectText","_callee","e","txt","regenerator_default","a","wrap","_context","prev","next","window","getSelection","toString","stop","targetWord","syncWord","target","dataset","name","keyHandler","character","key","arrOfWord","split","pop","join","_this2","this","_this$state","react_default","createElement","className","for","type","id","onKeyDown","tabIndex","onClick","length","slice","map","el","data-name","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTA0FeA,oNAlFbC,MAAQ,CACNC,WAAY,GACZC,SAAU,GACVC,KAAM,GACNC,YAAa,MAIfC,OAAS,WACP,IAAIC,EAAUC,EAAKP,MAAMC,WACzBO,IAAMC,IAAN,0CAAAC,OAAoDJ,IACjDK,KAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,KAAK,SAAAC,GACJL,EAAKO,SAAS,CACZZ,SAASa,OAAAC,EAAA,EAAAD,CAAKH,OAGjBK,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAIhCG,oDAAgB,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACVN,EAAMO,OAAOC,eAAeC,WADlBL,EAAAE,KAAA,EAERvB,EAAKO,SAAS,CAClBb,WAAYuB,IAHA,OAKdjB,EAAKF,SALS,wBAAAuB,EAAAM,SAAAZ,8DAShBa,WAAa,SAACZ,GACZ,IAAIa,EAAWb,EAAEc,OAAOC,QAAQC,KAChChC,EAAKO,SAAS,CACZX,KAAMiC,OAKVI,WAAa,SAACjB,GACZ,IAAIkB,EAAYlB,EAAEmB,IAClB,GAAkB,cAAdD,EAA2B,CAC7B,IAAIE,EAAYpC,EAAKP,MAAMG,KAAKyC,MAAM,IACtCD,EAAUE,MACVF,EAAYA,EAAUG,KAAK,IAC3BvC,EAAKO,SAAS,CACZX,KAAMwC,SAGRpC,EAAKO,SAAS,SAAAe,GAAI,MAAK,CACrB1B,KAAM0B,EAAK1B,KAAOsC,8EAKf,IAAAM,EAAAC,KAAAC,EAEoBD,KAAKhD,MAAxBE,EAFD+C,EAEC/C,SAAUC,EAFX8C,EAEW9C,KAElB,OAEE+C,EAAAxB,EAAAyB,cAAA,OAAKC,UAAU,OAEbF,EAAAxB,EAAAyB,cAAA,OAAKC,UAAU,iBACbF,EAAAxB,EAAAyB,cAAA,SAAOE,IAAI,aAAaD,UAAU,QAAlC,QACAF,EAAAxB,EAAAyB,cAAA,SAAOE,IAAI,kBAAkBD,UAAU,aAAvC,aACAF,EAAAxB,EAAAyB,cAAA,SAAOE,IAAI,eAAeD,UAAU,UAApC,WAGFF,EAAAxB,EAAAyB,cAAA,SAAOG,KAAK,WAAWf,KAAK,QAAQgB,GAAG,eACvCL,EAAAxB,EAAAyB,cAAA,SAAOG,KAAK,WAAWf,KAAK,QAAQgB,GAAG,oBACvCL,EAAAxB,EAAAyB,cAAA,SAAOG,KAAK,WAAWf,KAAK,QAAQgB,GAAG,iBAEvCL,EAAAxB,EAAAyB,cAAA,OAAKK,UAAWR,KAAKR,WAAYiB,UAAW,EAAGC,QAASV,KAAK3B,cAAe+B,UAAU,mCAAmCjD,GAEpG,IAApBD,EAASyD,OAAeT,EAAAxB,EAAAyB,cAAA,OAAKC,UAAU,gBAAiBlD,EAAS0D,MAAM,EAAG,GAAGC,IAAI,SAAAC,GAAE,OAAIZ,EAAAxB,EAAAyB,cAAA,KAAGC,UAAU,WAAWW,YAAWD,EAAG3D,KAAMuD,QAASX,EAAKZ,YAAa2B,EAAG3D,SAAoB,aA5E5K6D,cCMEC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAxB,EAAAyB,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,KAAK,SAAAkE,GACjCA,EAAaC","file":"static/js/main.09fc854c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    selectWord: '',\r\n    arraySyn: [],\r\n    word: '',\r\n    replaceWord: '',\r\n  };\r\n\r\n\r\n  getSyn = () => {\r\n    let synWord = this.state.selectWord;\r\n    axios.get(`https://api.datamuse.com/words?rel_syn=${synWord}`)\r\n      .then(res => res.data)\r\n      .then(res => {\r\n        this.setState({\r\n          arraySyn: [...res],\r\n        })\r\n      })\r\n      .catch(error => console.log(error))\r\n  };\r\n\r\n\r\n  getSelectText = async (e) => {\r\n    let txt = window.getSelection().toString();\r\n    await this.setState({\r\n      selectWord: txt,\r\n    });\r\n    this.getSyn();\r\n  };\r\n\r\n\r\n  targetWord = (e) => {\r\n    let syncWord = e.target.dataset.name;\r\n    this.setState({\r\n      word: syncWord,\r\n    })\r\n  };\r\n\r\n\r\n  keyHandler = (e) => {\r\n    let character = e.key;\r\n    if (character === 'Backspace') {\r\n      let arrOfWord = this.state.word.split('');\r\n      arrOfWord.pop();\r\n      arrOfWord = arrOfWord.join('');\r\n      this.setState({\r\n        word: arrOfWord,\r\n      })\r\n    } else {\r\n      this.setState(prev => ({\r\n        word: prev.word + character,\r\n      }))\r\n    }\r\n  };\r\n\r\n  render() {\r\n\r\n    const { arraySyn, word } = this.state;\r\n\r\n    return (\r\n\r\n      <div className=\"App\">\r\n\r\n        <div className='label_wrapper'>\r\n          <label for='check_bold' className='bold'>BOLD</label>\r\n          <label for='check_underline' className='underline'>UNDERLINE</label>\r\n          <label for='check_italic' className='italic'>ITALIC</label>\r\n        </div>\r\n\r\n        <input type='checkbox' name='input' id='check_bold' />\r\n        <input type='checkbox' name='input' id='check_underline' />\r\n        <input type='checkbox' name='input' id='check_italic' />\r\n\r\n        <div onKeyDown={this.keyHandler} tabIndex={-1} onClick={this.getSelectText} className='bold italic underline textfield'>{word}</div>\r\n\r\n        {arraySyn.length !== 0 ? <div className='modal_of_syn' >{arraySyn.slice(0, 6).map(el => <p className='word_syn' data-name={el.word} onClick={this.targetWord}>{el.word}</p>)}</div> : null}\r\n\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}